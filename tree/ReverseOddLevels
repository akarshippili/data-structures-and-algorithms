/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode reverseOddLevels(TreeNode root) {
        
        if(root==null) return null;
        
        ArrayList<Integer> list = new ArrayList<>();
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        while(!queue.isEmpty()){
            TreeNode cur = queue.poll();
            
            list.add(cur.val);
            
            if(cur.left!=null) queue.add(cur.left);
            if(cur.right!=null) queue.add(cur.right);
        }
        
        // System.out.println(list);
        
        queue.add(root);
        int level = 0;
        int counter = 0;
        int size = 1;
        
        while(!queue.isEmpty()){
            TreeNode cur = queue.poll();
            size--;
            
            if(level%2==1){
                int index = 2 * (int) Math.pow(2,level) - 2 - counter;
                // System.out.println(level + " " + counter + " " + index);
                cur.val = list.get(index);
            }
            
            counter++;
            if(cur.left!=null) queue.add(cur.left);
            if(cur.right!=null) queue.add(cur.right);
            
            if(size == 0){
                size = queue.size();
                level++;
                counter = 0;
            }    

        }
        
        
        
        return root;
        
    }
}
